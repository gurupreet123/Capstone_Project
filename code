#include <LiquidCrystal.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include "EmonLib.h"
#include "ThingSpeak.h"

EnergyMonitor emon;

#define vCalibration 83.3
#define currCalibration 0.50

const char* ssid = "Raj's iphone 15";
const char* pass = "qwertyuiop";

WiFiClient client;

unsigned long myChannelNumber = 2921357; // Replace with your Channel ID
const char *myWriteAPIKey = "U0RAIMGH0MOJBXCC"; // Replace with your Write API Key

float kWh = 0;
unsigned long lastmillis;

void setup()
{
  Serial.begin(9600);
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  ThingSpeak.begin(client);

  emon.voltage(35, vCalibration, 1.7); // Voltage: pin 35
  emon.current(34, currCalibration);  // Current: pin 34

  lastmillis = millis();
}

void loop()
{
  emon.calcVI(20, 2000);

  float timeElapsed = (millis() - lastmillis) / 1000.0; // in seconds
  kWh += (emon.apparentPower * timeElapsed) / 3600000.0; // convert Wh to kWh
  lastmillis = millis();

  float voltage = emon.Vrms;
  float current = emon.Irms;
  float power = emon.apparentPower;

  Serial.print("Vrms: ");
  Serial.print(voltage, 2);
  Serial.print(" V\t");

  Serial.print("Irms: ");
  Serial.print(current, 4);
  Serial.print(" A\t");

  Serial.print("Power: ");
  Serial.print(power, 4);
  Serial.print(" W\t");

  Serial.print("kWh: ");
  Serial.print(kWh, 5);
  Serial.println(" kWh");

  // Send data to ThingSpeak
  ThingSpeak.setField(1, voltage);
  ThingSpeak.setField(2, current);
  ThingSpeak.setField(3, power);
  ThingSpeak.setField(4, kWh);

  int status = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (status == 200)
  {
    Serial.println("ThingSpeak update successful.");
  }
  else
  {
    Serial.println("ThingSpeak update failed. HTTP error code: " + String(status));
  }

  delay(20000); // Wait 20 seconds between updates
}
